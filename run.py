{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'model'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-1-b2b0b8ddee94>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      6\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mpandas\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mpd\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      7\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 8\u001b[1;33m \u001b[1;32mfrom\u001b[0m \u001b[0mmodel\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mEnergyModel\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mModel\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      9\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     10\u001b[0m \u001b[0mDATASET_URL\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;34m\"https://s3-eu-west-1.amazonaws.com/kate-datasets/london_smartmeters/\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'model'"
     ]
    }
   ],
   "source": [
    "import argparse\n",
    "import os\n",
    "import pickle\n",
    "import urllib.request\n",
    "\n",
    "import pandas as pd\n",
    "\n",
    "from model import EnergyModel as Model\n",
    "\n",
    "DATASET_URL = \"https://s3-eu-west-1.amazonaws.com/kate-datasets/london_smartmeters/\"\n",
    "TRAIN_NAME = \"train.zip\"\n",
    "TEST_NAME = \"test.zip\"\n",
    "\n",
    "DATA_DIR = \"data\"\n",
    "PICKLE_NAME = 'model.pickle'\n",
    "\n",
    "\n",
    "def setup_data():\n",
    "    if not os.path.isdir(DATA_DIR):\n",
    "        os.makedirs(DATA_DIR)\n",
    "\n",
    "    for filename in [TRAIN_NAME, TEST_NAME]:\n",
    "        print(\"Downloading {}...\".format(filename))\n",
    "        req = urllib.request.urlopen(DATASET_URL + filename)\n",
    "        data = req.read()\n",
    "\n",
    "        with open(os.path.join(DATA_DIR, filename), \"wb\") as f:\n",
    "            f.write(data)\n",
    "\n",
    "\n",
    "def train_model():\n",
    "    df = pd.read_csv(os.sep.join([DATA_DIR, TRAIN_NAME]))\n",
    "\n",
    "    my_model = Model()\n",
    "    X_train, y_train = my_model.preprocess_training_data(df)\n",
    "    my_model.fit(X_train, y_train)\n",
    "\n",
    "    # Save to pickle\n",
    "    with open(PICKLE_NAME, 'wb') as f:\n",
    "        pickle.dump(my_model, f)\n",
    "\n",
    "\n",
    "def test_model():\n",
    "    df = pd.read_csv(os.sep.join([DATA_DIR, TEST_NAME]))\n",
    "\n",
    "    # Load pickle\n",
    "    with open(PICKLE_NAME, 'rb') as f:\n",
    "        my_model = pickle.load(f)\n",
    "\n",
    "    X_test = my_model.preprocess_unseen_data(df)\n",
    "    preds = my_model.predict(X_test)\n",
    "    print(\"### Your predictions ###\")\n",
    "    print(preds)\n",
    "\n",
    "\n",
    "def main():\n",
    "    parser = argparse.ArgumentParser(\n",
    "        description=\"A command line-tool to manage the project.\")\n",
    "    parser.add_argument(\n",
    "        'stage',\n",
    "        metavar='stage',\n",
    "        type=str,\n",
    "        choices=['setup', 'train', 'test'],\n",
    "        help=\"Stage to run.\")\n",
    "\n",
    "    stage = parser.parse_args().stage\n",
    "\n",
    "    if stage == \"setup\":\n",
    "        setup_data()\n",
    "        print(\"\\nSetup was successful!\")\n",
    "\n",
    "    elif stage == \"train\":\n",
    "        print(\"Training model...\")\n",
    "        train_model()\n",
    "\n",
    "    elif stage == \"test\":\n",
    "        print(\"Testing model...\")\n",
    "        test_model()\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
